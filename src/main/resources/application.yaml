# spring:
#   application:
#     name: PRODUCT-SERVICE
#   config:
#     import: optional:configserver:http://localhost:8888

# management:
#   endpoints:
#     web:
#       exposure:
#         include: "*"
server:
  port: 8086
  error:
    include-message: never

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    instance-id: ${spring.application.name}:${random.value}

spring:
  application:
    name: PRODUCT-SERVICE
  
  # OAuth2 Resource Server Configuration for JWT
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/myrealm
  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  
  cache:
    type: redis
    redis:
      time-to-live: 3600000  # 1 hour in milliseconds
      cache-null-values: false

  # Redis Configuration
  data:
    redis:
      # Redis server connection details
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:mypassword}
      
      # Connection and command timeout in milliseconds
      timeout: 2000
      
      # SSL configuration (uncomment and configure if using SSL)
      # ssl:
      #   enabled: false
      #   key-store: classpath:keystore.p12
      #   key-store-password: your-keystore-password
      #   key-store-type: PKCS12
      
      # Lettuce client configuration
      lettuce:
        # Connection pool settings
        pool:
          enabled: true
          max-active: 16
          max-idle: 8
          min-idle: 2
          max-wait: 5000ms
          time-between-eviction-runs: 30000ms
        
        # Client name for monitoring
        client-name: ${spring.application.name:product-service}
        
        # Shutdown timeout
        shutdown-timeout: 100ms
        
        # Cluster configuration (uncomment if using Redis Cluster)
        # cluster:
        #   refresh:
        #     adaptive: true
        #     period: 1m
      
      # Sentinel configuration (uncomment if using Redis Sentinel)
      # sentinel:
      #   master: mymaster
      #   nodes: localhost:26379,localhost:26380,localhost:26381
      #   password: ${REDIS_SENTINEL_PASSWORD:}
      #   sentinel:
      #     username: ${REDIS_SENTINEL_USERNAME:}
      #     password: ${REDIS_SENTINEL_PASSWORD:}

  rabbitmq:
    host: localhost # RabbitMQ host (localhost if running on the same machine)
    port: 5672 # Default RabbitMQ port
    username: guest # Default RabbitMQ username
    password: guest # Default RabbitMQ password
    virtual-host: / # Default virtual host ("/")
    listener:
      simple:
        retry:
          enabled: true # Enable retry for message consumption
          initial-interval: 1000 # Initial retry interval in milliseconds
          max-attempts: 5 # Maximum number of retry attempts
        acknowledge-mode: auto # Auto acknowledgment of messages
  elasticsearch:
    uris:
      - http://localhost:9200
      - http://localhost:9201
    password: guest
    username: elastic
    connection-timeout: 10s
    socket-timeout: 30s

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
      enabled: true
      file-size-threshold: 2KB
      location: ${java.io.tmpdir}

  main:
    allow-bean-definition-overriding: true
  datasource:
    url: jdbc:postgresql://localhost:26257/defaultdb?sslmode=disable
    username: root
    password: ""
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create-drop # Change this if needed (create, create-drop, validate, none)
    # properties:
    #   hibernate:
    #     dialect: org.hibernate.dialect.CockroachDB201Dialect # Correct dialect
    show-sql: true

  sql:
    init:
      #   data-locations:
      #     - classpath:sql/init.sql
      mode: always

logging:
  level:
    org:
      springframework:
        web: DEBUG
        data: DEBUG
        security: TRACE
    com:
      product:
        service: DEBUG
    hibernate:
      SQL: DEBUG
      type: TRACE

jwt:
  base64-secret: hl4gDqBxBgOSDWqBlvwFYQInjYRGAdS4lUT7Nf3Zk1nItoSQ9wSFDPU+kXHKcKUW/UKbpGv9bCsa9S/QsoFRHw==
  access_token-validity-in-seconds: 90000000
  refresh_token-validity-in-seconds: 100000000

# Enhanced Elasticsearch Configuration
elasticsearch:
  host: ${ELASTICSEARCH_HOST:localhost}
  port: ${ELASTICSEARCH_PORT:9200}
  username: ${ELASTICSEARCH_USERNAME:elastic}
  password: ${ELASTICSEARCH_PASSWORD:guest}
  ssl:
    enabled: ${ELASTICSEARCH_SSL_ENABLED:false}
  connection:
    timeout: ${ELASTICSEARCH_CONNECTION_TIMEOUT:5000}
  socket:
    timeout: ${ELASTICSEARCH_SOCKET_TIMEOUT:30000}
  indices:
    products:
      name: products
      settings-path: elasticsearch/product-settings.json
      refresh-policy: wait_for
  search:
    max-result-window: 10000
    default-page-size: 20
    max-page-size: 100
    suggestion-limit: 10

# AWS S3 Configuration
aws:
  s3:
    # S3 Connection Settings
    region: ${AWS_REGION:ca-central-1}
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}
    
    # Bucket Configuration
    bucket:
      name: ${S3_BUCKET_NAME:product-images}
      product-images: ${S3_PRODUCT_IMAGES_BUCKET:product-images}
      
    # Upload Configuration
    upload:
      max-file-size: 50MB
      allowed-content-types:
        - image/jpeg
        - image/jpg
        - image/png
        - image/gif
        - image/webp
        - image/bmp
        - image/tiff
      allowed-extensions:
        - jpg
        - jpeg
        - png
        - gif
        - webp
        - bmp
        - tiff
      max-files-per-upload: 10
      
    # CDN Configuration (CloudFront)
    cdn:
      enabled: ${CDN_ENABLED:false}
      domain: ${CDN_DOMAIN:}
      
    # Connection Settings
    connection:
      timeout: 30000
      socket-timeout: 30000
      max-connections: 50
      max-error-retry: 3
      
    # Security
    use-iam-role: ${USE_IAM_ROLE:true}
    
    # Image Processing
    image-processing:
      enabled: true
      quality: 85
      thumbnails:
        enabled: true
        sizes:
          - name: thumbnail
            width: 150
            height: 150
          - name: small
            width: 300
            height: 300
          - name: medium
            width: 600
            height: 600
          - name: large
            width: 1200
            height: 1200

# File Upload Validation
file:
  validation:
    image:
      max-size: 50MB
      min-size: 1KB
      max-width: 5000
      max-height: 5000
      min-width: 50
      min-height: 50
      quality:
        min: 1
        max: 100
        default: 85
